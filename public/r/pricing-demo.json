{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-demo",
  "type": "registry:block",
  "title": "pricing-demo",
  "description": "A simple pricing-demo app.",
  "dependencies": [
    "next-transition-bar",
    "lucide-react",
    "@supabase/auth-helpers-nextjs",
    "nodemailer"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card",
    "sonner",
    "select",
    "dialog",
    "badge",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "app/api/invitation/[action]/route.ts",
      "content": "import { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { action: string } }\n) {\n  const { action } = params;\n  const { searchParams } = new URL(request.url);\n  const token = searchParams.get('token');\n\n  if (!token) {\n    return NextResponse.redirect(new URL('/?error=invalid_token', request.url));\n  }\n\n  // Here you would typically:\n  // 1. Verify the token\n  // 2. Update the invitation status in your database\n  // 3. Add the user to the team if accepted\n\n  // For now, we'll just redirect to the thank-you page\n  return NextResponse.redirect(new URL(`/invitation/thank-you?action=${action}`, request.url));\n} ",
      "type": "registry:page",
      "target": "app/api/invitation/[action]/route.ts"
    },
    {
      "path": "app/api/invitation/accept/route.ts",
      "content": "import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { cookies } from 'next/headers';\nimport { NextResponse } from 'next/server';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const token = searchParams.get('token');\n\n  if (!token) {\n    return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=accept&error=Token is required`);\n  }\n\n  const supabase = createRouteHandlerClient({ cookies });\n\n  try {\n    // Get the invitation\n    const { data: invitation, error: invitationError } = await supabase\n      .from('team_invitations')\n      .select('*')\n      .eq('token', token)\n      .single();\n\n    if (invitationError || !invitation) {\n      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=accept&error=Invalid or expired invitation`);\n    }\n\n    // Check if invitation is expired\n    const invitationDate = new Date(invitation.created_at);\n    const now = new Date();\n    const diffDays = Math.floor((now.getTime() - invitationDate.getTime()) / (1000 * 60 * 60 * 24));\n\n    if (diffDays > 7) {\n      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=accept&error=Invitation has expired`);\n    }\n\n    // Update invitation status\n    const { error: updateError } = await supabase\n      .from('team_invitations')\n      .update({ status: 'accepted' })\n      .eq('token', token);\n\n    if (updateError) {\n      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=accept&error=Failed to accept invitation`);\n    }\n\n    // Add user to team\n    const { error: teamError } = await supabase\n      .from('team_members')\n      .insert({\n        team_owner_id: invitation.team_owner_id,\n        member_name: invitation.member_name,\n        member_email: invitation.member_email,\n        role: invitation.role,\n      });\n\n    if (teamError) {\n      console.error('Team error:', teamError);\n      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=accept&error=Failed to add user to team`);\n    }\n\n    return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=accept&success=true`);\n  } catch (error) {\n    console.error('Error accepting invitation:', error);\n    return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=accept&error=Internal server error`);\n  }\n} ",
      "type": "registry:page",
      "target": "app/api/invitation/accept/route.ts"
    },
    {
      "path": "app/api/invitation/decline/route.ts",
      "content": "import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { cookies } from 'next/headers';\nimport { NextResponse } from 'next/server';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const token = searchParams.get('token');\n\n  if (!token) {\n    return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=decline&error=Token is required`);\n  }\n\n  const supabase = createRouteHandlerClient({ cookies });\n\n  try {\n    // Get the invitation\n    const { data: invitation, error: invitationError } = await supabase\n      .from('team_invitations')\n      .select('*')\n      .eq('token', token)\n      .single();\n\n    if (invitationError || !invitation) {\n      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=decline&error=Invalid or expired invitation`);\n    }\n\n    // Update invitation status\n    const { error: updateError } = await supabase\n      .from('team_invitations')\n      .update({ status: 'declined' })\n      .eq('token', token);\n\n    if (updateError) {\n      return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=decline&error=Failed to decline invitation`);\n    }\n\n    return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=decline&success=true`);\n  } catch (error) {\n    console.error('Error declining invitation:', error);\n    return NextResponse.redirect(`${process.env.NEXT_PUBLIC_APP_URL}/invitation/thank-you?action=decline&error=Internal server error`);\n  }\n} ",
      "type": "registry:page",
      "target": "app/api/invitation/decline/route.ts"
    },
    {
      "path": "app/api/send-invitation/route.ts",
      "content": "import { NextResponse } from 'next/server';\nimport nodemailer from 'nodemailer';\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASSWORD,\n  },\n});\n\nexport async function POST(request: Request) {\n  try {\n    const { to, name, role, token, teamOwnerId } = await request.json();\n\n    const acceptUrl = `${process.env.NEXT_PUBLIC_APP_URL}/api/invitation/accept?token=${token}`;\n    const declineUrl = `${process.env.NEXT_PUBLIC_APP_URL}/api/invitation/decline?token=${token}`;\n\n    const mailOptions = {\n      from: process.env.EMAIL_USER,\n      to,\n      subject: 'Team Invitation',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>Team Invitation</h2>\n          <p>Hello ${name},</p>\n          <p>You have been invited to join a team with the role of ${role}.</p>\n          <p>Please click one of the buttons below to accept or decline this invitation:</p>\n          <div style=\"margin: 20px 0;\">\n            <a href=\"${acceptUrl}\" style=\"background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin-right: 10px;\">Accept Invitation</a>\n            <a href=\"${declineUrl}\" style=\"background-color: #f44336; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Decline Invitation</a>\n          </div>\n          <p>This invitation will expire in 7 days.</p>\n        </div>\n      `,\n    };\n\n    await transporter.sendMail(mailOptions);\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error sending email:', error);\n    return NextResponse.json({ error: 'Failed to send email' }, { status: 500 });\n  }\n} ",
      "type": "registry:page",
      "target": "app/api/send-invitation/route.ts"
    },
    {
      "path": "app/auth/callback/route.ts",
      "content": "import { createRouteHandlerClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET(request: Request) {\n  const requestUrl = new URL(request.url);\n  const code = requestUrl.searchParams.get(\"code\");\n\n  if (code) {\n    const supabase = createRouteHandlerClient({ cookies });\n    await supabase.auth.exchangeCodeForSession(code);\n  }\n\n  // URL to redirect to after sign in process completes\n  return NextResponse.redirect(new URL(\"/dashboard\", requestUrl.origin));\n} ",
      "type": "registry:page",
      "target": "app/auth/callback/route.ts"
    },
    {
      "path": "app/auth/login/page.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport Link from \"next/link\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronDown } from \"lucide-react\";\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [savedAccounts, setSavedAccounts] = useState<{ email: string; session: string }[]>([]);\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const supabase = createClientComponentClient();\n\n  useEffect(() => {\n    // Load saved accounts\n    const loadSavedAccounts = () => {\n      const saved = localStorage.getItem('supabase_sessions');\n      if (saved) {\n        setSavedAccounts(JSON.parse(saved));\n      }\n    };\n    loadSavedAccounts();\n  }, []);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        if (error.message.includes('Invalid login credentials')) {\n          setError('Invalid email or password.');\n        } else {\n          setError(error.message);\n        }\n        return;\n      }\n\n      if (data?.session) {\n        // Save the session\n        const sessions = JSON.parse(localStorage.getItem('supabase_sessions') || '[]');\n        const existingSessionIndex = sessions.findIndex((s: any) => s.email === email);\n        \n        if (existingSessionIndex === -1) {\n          sessions.push({\n            email,\n            session: JSON.stringify(data.session)\n          });\n        } else {\n          sessions[existingSessionIndex].session = JSON.stringify(data.session);\n        }\n        \n        localStorage.setItem('supabase_sessions', JSON.stringify(sessions));\n        localStorage.setItem('current_session', JSON.stringify(data.session));\n\n        // Check if we're adding a new account\n        const isAddingAccount = searchParams.get('add_account') === 'true';\n        if (isAddingAccount) {\n          // Clear any previous session\n          localStorage.removeItem('previous_session');\n        }\n\n        // Check if user exists in team_members\n        const { data: existingMember, error: checkError } = await supabase\n          .from('team_members')\n          .select('id')\n          .eq('member_email', email)\n          .single();\n\n        if (checkError && checkError.code !== 'PGRST116') {\n          console.error('Error checking team member:', checkError);\n        }\n\n        // If user doesn't exist in team_members, add them\n        if (!existingMember) {\n          const { error: insertError } = await supabase\n            .from('team_members')\n            .insert({\n              team_owner_id: data.session.user.id,\n              member_name: email.split('@')[0],\n              member_email: email,\n              role: 'admin'\n            });\n\n          if (insertError) {\n            console.error('Error adding to team members:', insertError);\n          }\n        }\n\n        // Force a hard refresh to ensure the new session is loaded\n        window.location.href = '/dashboard';\n      }\n    } catch (err) {\n      console.error('Login error:', err);\n      setError('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleQuickLogin = async (session: string) => {\n    try {\n      const sessionData = JSON.parse(session);\n      const { error } = await supabase.auth.setSession({\n        access_token: sessionData.access_token,\n        refresh_token: sessionData.refresh_token,\n      });\n\n      if (error) {\n        console.error('Quick login error:', error);\n        setError('Failed to switch accounts. Please try logging in manually.');\n        return;\n      }\n\n      localStorage.setItem('current_session', session);\n      window.location.href = '/dashboard';\n    } catch (error) {\n      console.error('Quick login error:', error);\n      setError('Failed to switch accounts. Please try logging in manually.');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <div className=\"max-w-md w-full space-y-8 p-8 bg-white rounded-lg shadow\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Sign in to your account\n          </h2>\n        </div>\n\n        {savedAccounts.length > 0 && (\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-gray-600\">Quick login with saved accounts:</p>\n            <div className=\"flex flex-col gap-2\">\n              {savedAccounts.map((account) => (\n                <Button\n                  key={account.email}\n                  variant=\"outline\"\n                  onClick={() => handleQuickLogin(account.session)}\n                  className=\"w-full justify-start\"\n                >\n                  {account.email}\n                </Button>\n              ))}\n            </div>\n            <div className=\"relative my-4\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-white text-gray-500\">Or continue with</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email\" className=\"sr-only\">\n                Email address\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Email address\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                Password\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Password\"\n              />\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"text-red-500 text-sm text-center p-3 bg-red-50 rounded-md\">\n              {error}\n            </div>\n          )}\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n            >\n              {isLoading ? \"Signing in...\" : \"Sign in\"}\n            </button>\n          </div>\n\n          <div className=\"text-sm text-center\">\n            <Link\n              href=\"/auth/signup\"\n              className=\"font-medium text-blue-600 hover:text-blue-500\"\n            >\n              Don't have an account? Sign up\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n} ",
      "type": "registry:page",
      "target": "app/auth/login/page.tsx"
    },
    {
      "path": "app/auth/signup/page.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\";\nimport Link from \"next/link\";\n\nexport default function SignUpPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n  const supabase = createClientComponentClient();\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\");\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const { error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback`,\n        },\n      });\n\n      if (error) {\n        setError(error.message);\n      } else {\n        // Show success message and redirect to login\n        router.push(\"/auth/login?message=Check your email to confirm your account\");\n      }\n    } catch (error) {\n      setError(\"An unexpected error occurred\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-[400px]\">\n        <CardHeader>\n          <CardTitle>Create an Account</CardTitle>\n          <CardDescription>Enter your details to create your account</CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSignUp}>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <div className=\"bg-red-50 text-red-500 p-3 rounded-md text-sm\">\n                {error}\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                Email\n              </label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Create a password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label htmlFor=\"confirmPassword\" className=\"text-sm font-medium\">\n                Confirm Password\n              </label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                placeholder=\"Confirm your password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? \"Creating account...\" : \"Sign Up\"}\n            </Button>\n            <p className=\"text-sm text-center text-gray-600\">\n              Already have an account?{\" \"}\n              <Link href=\"/auth/login\" className=\"text-blue-600 hover:underline\">\n                Login\n              </Link>\n            </p>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n} ",
      "type": "registry:page",
      "target": "app/auth/signup/page.tsx"
    },
    {
      "path": "app/dashboard/page.tsx",
      "content": "\"use client\"\nimport { Dashboard } from \"@/components/dashboard/Dashboard\";\nimport { UsageStats } from \"@/components/dashboard/UsageStats\";\nimport { TeamMembers } from \"@/components/dashboard/TeamMembers\";\n\nexport default function DashboardPage() {\n  return (\n    <Dashboard>\n      <Dashboard.Header />\n      <UsageStats>\n        <UsageStats.Storage />\n        <UsageStats.Tokens />\n        <UsageStats.Prompts />\n      </UsageStats>\n      <TeamMembers>\n        <TeamMembers.List />\n        <TeamMembers.PendingInvites />\n      </TeamMembers>\n    </Dashboard>\n  );\n} ",
      "type": "registry:page",
      "target": "app/dashboard/page.tsx"
    },
    {
      "path": "app/dashboard/invite/page.tsx",
      "content": "\"use client\";\n\nimport { ChevronLeft } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { InviteForm } from \"@/components/dashboard/InviteForm\";\nimport { Toaster } from \"@/components/ui/sonner\";\n\nexport default function InviteMemberPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-8\">\n      <Toaster />\n      <div className=\"max-w-md mx-auto\">\n        <div className=\"mb-8\">\n          <Link href=\"/dashboard\" className=\"flex items-center text-gray-600 hover:text-gray-900\">\n            <ChevronLeft className=\"h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n        </div>\n\n        <InviteForm />\n      </div>\n    </div>\n  );\n} ",
      "type": "registry:page",
      "target": "app/dashboard/invite/page.tsx"
    },
    {
      "path": "app/invitation/thank-you/page.tsx",
      "content": "import { Card } from '@/components/ui/card';\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\n\nexport default function ThankYouPage({\n  searchParams,\n}: {\n  searchParams: { action?: string; error?: string; success?: string };\n}) {\n  const action = searchParams.action;\n  const error = searchParams.error;\n  const success = searchParams.success === 'true';\n\n  if (!action || (action !== 'accept' && action !== 'decline')) {\n    redirect('/');\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <Card className=\"p-8 max-w-md w-full mx-4\">\n        <div className=\"text-center\">\n          {error ? (\n            <>\n              <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Error Processing Invitation</h1>\n              <p className=\"text-gray-600 mb-6\">\n                {error}\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                Please contact the team owner for assistance.\n              </p>\n            </>\n          ) : success ? (\n            action === 'accept' ? (\n              <>\n                <h1 className=\"text-2xl font-bold text-green-600 mb-4\">Thank You for Accepting!</h1>\n                <p className=\"text-gray-600 mb-6\">\n                  You have successfully accepted the team invitation.\n                </p>\n              </>\n            ) : (\n              <>\n                <h1 className=\"text-2xl font-bold text-gray-600 mb-4\">Invitation Declined</h1>\n                <p className=\"text-gray-600 mb-6\">\n                  You have declined the team invitation. If you change your mind, you can request a new invitation from the team owner.\n                </p>\n              </>\n            )\n          ) : (\n            <>\n              <h1 className=\"text-2xl font-bold text-gray-600 mb-4\">Processing Invitation</h1>\n              <p className=\"text-gray-600 mb-6\">\n                Please wait while we process your request...\n              </p>\n            </>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n} ",
      "type": "registry:page",
      "target": "app/invitation/thank-you/page.tsx"
    },
    {
      "path": "app/layout.tsx",
      "content": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport NextTransitionBar from \"next-transition-bar\";\n\n\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={``}\n      >\n       <NextTransitionBar/>\n        {children}\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/layout.tsx"
    },
    {
      "path": "app/page.tsx",
      "content": "\"use client\";\n\nimport { PricingPlans } from \"@/components/pricing/PricingPlans\";\n\nexport default function Home() {\n  return (\n    <PricingPlans>\n      <PricingPlans.Header />\n      <PricingPlans.Error />\n      <PricingPlans.List />\n      <PricingPlans.AccountSection />\n    </PricingPlans>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "components/dashboard/AccountSwitcher.tsx",
      "content": "import { useState, useEffect } from \"react\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronDown, Plus, Trash2 } from \"lucide-react\";\n\nexport function AccountSwitcher() {\n  const supabase = createClientComponentClient();\n  const router = useRouter();\n  const [currentEmail, setCurrentEmail] = useState<string | null>(null);\n  const [savedSessions, setSavedSessions] = useState<{ email: string; session: string }[]>([]);\n\n  useEffect(() => {\n    const loadSessions = async () => {\n      try {\n        // Get current session\n        const { data: { user }, error } = await supabase.auth.getUser();\n        \n        if (error) {\n          console.error('Auth error:', error);\n          router.push('/auth/login');\n          return;\n        }\n\n        setCurrentEmail(user?.email || null);\n\n        // Load saved sessions from localStorage\n        const saved = localStorage.getItem('supabase_sessions');\n        if (saved) {\n          setSavedSessions(JSON.parse(saved));\n        }\n      } catch (error) {\n        console.error('Error loading sessions:', error);\n        router.push('/auth/login');\n      }\n    };\n    loadSessions();\n  }, [supabase.auth, router]);\n\n  const handleSignOut = async () => {\n    try {\n      // Remove current account from saved sessions\n      if (currentEmail) {\n        const updatedSessions = savedSessions.filter(session => session.email !== currentEmail);\n        localStorage.setItem('supabase_sessions', JSON.stringify(updatedSessions));\n        setSavedSessions(updatedSessions);\n      }\n\n      // Sign out from Supabase\n      await supabase.auth.signOut();\n      \n      // Clear current session\n      localStorage.removeItem('current_session');\n      \n      // Redirect to login\n      router.push('/auth/login');\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const switchAccount = async (session: string) => {\n    try {\n      // Parse the session string\n      const sessionData = JSON.parse(session);\n      \n      // Set the new session\n      const { error } = await supabase.auth.setSession({\n        access_token: sessionData.access_token,\n        refresh_token: sessionData.refresh_token,\n      });\n\n      if (error) {\n        console.error('Error switching account:', error);\n        router.push('/auth/login');\n        return;\n      }\n\n      // Store the current session\n      localStorage.setItem('current_session', session);\n\n      // Force a hard refresh of the page\n      window.location.href = '/dashboard';\n    } catch (error) {\n      console.error('Error switching account:', error);\n      router.push('/auth/login');\n    }\n  };\n\n  const handleAddAccount = () => {\n    // Store current session before redirecting\n    const currentSession = localStorage.getItem('current_session');\n    if (currentSession) {\n      // Store the current session as previous session\n      localStorage.setItem('previous_session', currentSession);\n    }\n    \n    // Clear the current session to ensure the new login takes precedence\n    localStorage.removeItem('current_session');\n    \n    // Redirect to login with add_account flag\n    window.location.href = '/auth/login?add_account=true';\n  };\n\n  const handleDeleteAccount = (emailToDelete: string) => {\n    try {\n      // Remove the account from saved sessions\n      const updatedSessions = savedSessions.filter(session => session.email !== emailToDelete);\n      localStorage.setItem('supabase_sessions', JSON.stringify(updatedSessions));\n      setSavedSessions(updatedSessions);\n\n      // If the deleted account is the current one, sign out\n      if (emailToDelete === currentEmail) {\n        handleSignOut();\n      }\n    } catch (error) {\n      console.error('Error deleting account:', error);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center gap-4\">\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className=\"flex items-center gap-2\">\n            {currentEmail}\n            <ChevronDown className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          {savedSessions.map((savedSession) => (\n            <DropdownMenuItem\n              key={savedSession.email}\n              onClick={() => switchAccount(savedSession.session)}\n              className={`flex items-center justify-between ${currentEmail === savedSession.email ? \"bg-gray-100\" : \"\"}`}\n            >\n              <span>{savedSession.email}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-6 w-6 hover:bg-red-100\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleDeleteAccount(savedSession.email);\n                }}\n              >\n                <Trash2 className=\"h-4 w-4 text-red-500\" />\n              </Button>\n            </DropdownMenuItem>\n          ))}\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={handleAddAccount} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Add Account\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleSignOut} className=\"text-red-600\">\n            Logout\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n} ",
      "type": "registry:component",
      "target": "components/dashboard/AccountSwitcher.tsx"
    },
    {
      "path": "components/dashboard/Dashboard.tsx",
      "content": "\"use client\"\nimport { createContext, useContext } from \"react\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport { DashboardHeader } from \"@/components/dashboard/DashboardHeader\";\nimport { UsageStats } from \"@/components/dashboard/UsageStats\";\nimport { TeamMembers } from \"@/components/dashboard/TeamMembers\";\nimport { useDashboardPage } from \"@/hooks/useDashboardPage\";\n\ninterface DashboardContextType {\n  userData: {\n    plan: string;\n    storage_used: number;\n    storage_total: number;\n    tokens_used: number;\n    tokens_total: number;\n    prompts_used: number;\n    prompts_total: number;\n  } | null;\n  teamMembers: any[];\n  pendingInvites: any[];\n  simulateUsage: (type: 'storage' | 'tokens' | 'prompts', amount: number) => Promise<void>;\n  handleRemoveMember: (memberId: string) => void;\n  handleResendInvite: (invite: any) => void;\n  handleCancelInvite: (inviteId: string) => void;\n  handleRoleChange: (memberId: string, newRole: string) => void;\n  handleNameChange: (memberId: string, newName: string) => void;\n  loading: boolean;\n  error: string | null;\n}\n\nconst DashboardContext = createContext<DashboardContextType | null>(null);\n\nexport function Dashboard({ children }: { children: React.ReactNode }) {\n  const {\n    userData,\n    teamMembers,\n    pendingInvites,\n    simulateUsage,\n    handleRemoveMember,\n    handleResendInvite,\n    handleCancelInvite,\n    handleRoleChange,\n    handleNameChange,\n    loading,\n    error,\n  } = useDashboardPage();\n\n  if (loading || !userData) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <DashboardContext.Provider\n      value={{\n        userData,\n        teamMembers,\n        pendingInvites,\n        simulateUsage,\n        handleRemoveMember,\n        handleResendInvite,\n        handleCancelInvite,\n        handleRoleChange,\n        handleNameChange,\n        loading,\n        error,\n      }}\n    >\n      <div className=\"min-h-screen bg-gray-50 p-8\">\n        <Toaster />\n        <div className=\"max-w-7xl mx-auto\">\n          {children}\n        </div>\n      </div>\n    </DashboardContext.Provider>\n  );\n}\n\nexport function useDashboard() {\n  const context = useContext(DashboardContext);\n  if (!context) {\n    throw new Error(\"useDashboard must be used within a Dashboard component\");\n  }\n  return context;\n}\n\nexport function DashboardHeaderSection() {\n  const { userData } = useDashboard();\n  return (\n    <>\n      <DashboardHeader plan={userData!.plan} />\n      <p className=\"text-gray-600 mb-8\">Manage your resources and team members</p>\n    </>\n  );\n}\n\nexport function DashboardUsageStats() {\n  const { userData, simulateUsage } = useDashboard();\n  return <UsageStats userData={userData!} onSimulateUsage={simulateUsage} />;\n}\n\nexport function DashboardTeamMembers() {\n  const {\n    teamMembers,\n    pendingInvites,\n    handleRemoveMember,\n    handleResendInvite,\n    handleCancelInvite,\n    handleRoleChange,\n    handleNameChange,\n    userData,\n  } = useDashboard();\n\n  return (\n    <TeamMembers\n      teamMembers={teamMembers}\n      pendingInvites={pendingInvites}\n      onRemoveMember={handleRemoveMember}\n      onResendInvite={handleResendInvite}\n      onCancelInvite={handleCancelInvite}\n      onRoleChange={handleRoleChange}\n      onNameChange={handleNameChange}\n      userData={userData!}\n    />\n  );\n}\n\n// Compound component subcomponents\nDashboard.Header = DashboardHeaderSection;\nDashboard.UsageStats = DashboardUsageStats;\nDashboard.TeamMembers = DashboardTeamMembers; ",
      "type": "registry:component",
      "target": "components/dashboard/Dashboard.tsx"
    },
    {
      "path": "components/dashboard/DashboardHeader.tsx",
      "content": "import Link from \"next/link\";\n\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { AccountSwitcher } from \"./AccountSwitcher\";\n\n\ninterface DashboardHeaderProps {\n  plan: string;\n}\n\nexport function DashboardHeader({ plan }: DashboardHeaderProps) {\n  const supabase = createClientComponentClient();\n  const router = useRouter();\n  const [userEmail, setUserEmail] = useState<string | null>(null);\n\n  useEffect(() => {\n    const getUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      setUserEmail(user?.email || null);\n    };\n    getUser();\n  }, [supabase.auth]);\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut();\n    router.refresh();\n  };\n\n  return (\n    <div className=\"flex justify-between items-center mb-6\">\n      <div>\n        <Link href=\"/\" className=\"border-2 border-black rounded-md p-1\">Go to pricing</Link>\n        <div className=\"mt-0.5\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n          <p className=\"text-sm text-gray-500\">Current plan: <span className=\"font-bold text-lg text-blue-500\" > {plan}</span> </p>\n        </div>\n      </div>\n      <div className=\"flex items-center gap-4\">\n       \n        <AccountSwitcher/>\n        \n      </div>\n    </div>\n  );\n} ",
      "type": "registry:component",
      "target": "components/dashboard/DashboardHeader.tsx"
    },
    {
      "path": "components/dashboard/EditMemberDialog.tsx",
      "content": "\"use client\"\nimport { TeamMember } from \"@/types/dashboard\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\n\ninterface EditMemberDialogProps {\n  member: TeamMember;\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (memberId: string, newName: string, newRole: string) => void;\n}\n\nexport function EditMemberDialog({ member, isOpen, onClose, onSave }: EditMemberDialogProps) {\n  const [name, setName] = useState(member.member_name || \"\");\n  const [role, setRole] = useState(member.role);\n\n  const handleSave = () => {\n    onSave(member.id, name, role);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n      if (!open) {\n        return;\n      }\n    }}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Edit Member Details</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Name</label>\n            <Input\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Enter member name\"\n              className=\"capitalize\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Role</label>\n            <Select value={role} onValueChange={setRole}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n                <SelectItem value=\"editor\">Editor</SelectItem>\n                <SelectItem value=\"viewer\">Viewer</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        <div className=\"flex justify-end gap-2\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>\n            Save Changes\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n} ",
      "type": "registry:component",
      "target": "components/dashboard/EditMemberDialog.tsx"
    },
    {
      "path": "components/dashboard/InviteForm.tsx",
      "content": "import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useInviteMember } from \"@/hooks/useInviteMember\";\nimport { Loader2 } from \"lucide-react\";\n\nexport function InviteForm() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    role: \"\",\n  });\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [errors, setErrors] = useState({\n    name: \"\",\n    email: \"\",\n  });\n\n  const { loading, error, success, handleSubmit } = useInviteMember();\n\n  // Name validation: No numbers, first letter capital\n  const validateName = (name: string) => {\n    if (!name) return \"Name is required\";\n    if (/[0-9]/.test(name)) return \"Name cannot contain numbers\";\n    if (name[0] !== name[0].toUpperCase()) return \"First letter should be capital\";\n    return \"\";\n  };\n\n  // Email validation\n  const validateEmail = (email: string) => {\n    if (!email) return \"Email is required\";\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (!emailRegex.test(email)) return \"Please enter a valid email address\";\n    return \"\";\n  };\n\n  // Validate form whenever formData changes\n  useEffect(() => {\n    const nameError = validateName(formData.name);\n    const emailError = validateEmail(formData.email);\n    \n    setErrors({\n      name: nameError,\n      email: emailError,\n    });\n\n    const isValid = \n      !nameError && \n      !emailError && \n      formData.role !== \"\";\n\n    setIsFormValid(isValid);\n  }, [formData]);\n\n  const onSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await handleSubmit(formData);\n    setFormData({ name: \"\", email: \"\", role: \"\" });\n  };\n\n  return (\n    <>\n      {loading && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center\">\n          <div className=\"bg-white p-6 rounded-lg shadow-lg flex flex-col items-center gap-4\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <p className=\"text-sm font-medium\">Processing invitation...</p>\n          </div>\n        </div>\n      )}\n      <Card className=\"max-w-md mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Invite Team Member</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <div className=\"mb-4 p-3 bg-red-50 text-red-500 rounded-md text-sm\">\n              {error}\n            </div>\n          )}\n          {success && (\n            <div className=\"mb-4 p-3 bg-green-50 text-green-500 rounded-md text-sm\">\n              {success}\n            </div>\n          )}\n          <form onSubmit={onSubmit} className=\"space-y-4\">\n            <div className=\"flex gap-2\">\n              <div className=\"space-y-1.5 w-[60%]\">\n                <label htmlFor=\"name\" className=\"text-sm font-medium flex items-center\">\n                  Full Name <span className=\"text-red-500 ml-1\">*</span>\n                </label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    // Auto-capitalize first letter\n                    const capitalized = value.charAt(0).toUpperCase() + value.slice(1);\n                    setFormData({ ...formData, name: capitalized });\n                  }}\n                  placeholder=\"Enter team member's name\"\n                  required\n                  className=\"h-9\"\n                />\n                {errors.name && (\n                  <p className=\"text-red-500 text-xs mt-1\">{errors.name}</p>\n                )}\n              </div>\n              <div className=\"space-y-1.5 w-[40%]\">\n                <label htmlFor=\"role\" className=\"text-sm font-medium flex items-center\">\n                  Role <span className=\"text-red-500 ml-1\">*</span>\n                </label>\n                <Select\n                  value={formData.role}\n                  onValueChange={(value) => setFormData({ ...formData, role: value })}\n                >\n                  <SelectTrigger className=\"h-9\">\n                    <SelectValue placeholder=\"Select a role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                    <SelectItem value=\"editor\">Editor</SelectItem>\n                    <SelectItem value=\"viewer\">Viewer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-1.5\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium flex items-center\">\n                Email Address <span className=\"text-red-500 ml-1\">*</span>\n              </label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                placeholder=\"Enter team member's email\"\n                required\n                className=\"h-9\"\n              />\n              {errors.email && (\n                <p className=\"text-red-500 text-xs mt-1\">{errors.email}</p>\n              )}\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full h-9\" \n              disabled={!isFormValid || loading}\n            >\n              Send Invitation\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </>\n  );\n} ",
      "type": "registry:component",
      "target": "components/dashboard/InviteForm.tsx"
    },
    {
      "path": "components/dashboard/PendingInvites.tsx",
      "content": "import { Card, CardHeader, CardTitle, CardContent,  } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function PendingInvites({ pendingInvites, onResendInvite }: { pendingInvites: any[], onResendInvite: (invite: any) => void }) {\n  if (!pendingInvites.length) return null;\n  return (\n    <div className=\"mt-8\">\n      <h2 className=\"text-lg font-medium text-gray-900 mb-4\">Pending Invites</h2>\n      <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n        {pendingInvites.map((invite) => (\n          <Card key={invite.id}>\n            <CardHeader>\n              <CardTitle className=\"text-sm font-medium\">\n                {invite.member_name}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-gray-500\">{invite.member_email}</p>\n                <p className=\"text-sm text-gray-500\">Role: {invite.role}</p>\n                <p className=\"text-sm text-gray-500\">\n                  Expires: {new Date(invite.expires_at).toLocaleDateString()}\n                </p>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onResendInvite(invite)}\n                  >\n                    Resend\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n} ",
      "type": "registry:component",
      "target": "components/dashboard/PendingInvites.tsx"
    },
    {
      "path": "components/dashboard/TeamMembers.tsx",
      "content": "\"use client\"\nimport { createContext, useContext, useState } from \"react\";\nimport { TeamMember, PendingInvite } from \"@/types/dashboard\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, Trash2, Mail, User, Pencil } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useDashboard } from \"./Dashboard\";\nimport { EditMemberDialog } from \"./EditMemberDialog\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface TeamMembersContextType {\n  teamMembers: TeamMember[];\n  pendingInvites: PendingInvite[];\n  handleRemoveMember: (memberId: string) => void;\n  handleResendInvite: (invite: PendingInvite) => void;\n  handleCancelInvite: (inviteId: string) => void;\n  handleRoleChange: (memberId: string, newRole: string) => void;\n  handleNameChange: (memberId: string, newName: string) => void;\n  userData: {\n    plan: string;\n  };\n}\n\nconst TeamMembersContext = createContext<TeamMembersContextType | null>(null);\n\nexport function TeamMembers({ children }: { children: React.ReactNode }) {\n  const {\n    teamMembers,\n    pendingInvites,\n    handleRemoveMember,\n    handleResendInvite,\n    handleCancelInvite,\n    handleRoleChange,\n    handleNameChange,\n    userData,\n  } = useDashboard();\n\n  return (\n    <TeamMembersContext.Provider\n      value={{\n        teamMembers,\n        pendingInvites,\n        handleRemoveMember,\n        handleResendInvite,\n        handleCancelInvite,\n        handleRoleChange,\n        handleNameChange,\n        userData: userData!,\n      }}\n    >\n      <Card className=\"border-none shadow-sm\">\n        <CardHeader className=\"flex flex-row items-center justify-between border-b pb-4\">\n          <div>\n            <CardTitle className=\"text-lg font-semibold\">Team Members</CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {teamMembers.length} of {userData!.plan === 'Basic' ? 5 : userData!.plan === 'Pro' ? 10 : 15} seats used ({pendingInvites.length} pending)\n            </p>\n          </div>\n          <Link href=\"/dashboard/invite\">\n            <Button size=\"sm\" className=\"gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Invite Member\n            </Button>\n          </Link>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-6\">\n            {children}\n          </div>\n        </CardContent>\n      </Card>\n    </TeamMembersContext.Provider>\n  );\n}\n\nfunction useTeamMembers() {\n  const context = useContext(TeamMembersContext);\n  if (!context) {\n    throw new Error(\"useTeamMembers must be used within a TeamMembers component\");\n  }\n  return context;\n}\n\nexport function TeamMembersList() {\n  const { teamMembers, handleRemoveMember, handleRoleChange, handleNameChange } = useTeamMembers();\n  const [editingMember, setEditingMember] = useState<TeamMember | null>(null);\n  const [confirmDialog, setConfirmDialog] = useState<{\n    isOpen: boolean;\n    type: 'delete' | 'cancel' | 'resend';\n    member?: TeamMember;\n    invite?: PendingInvite;\n    message: string;\n  } | null>(null);\n\n  const handleConfirmAction = async () => {\n    if (!confirmDialog) return;\n\n    try {\n      switch (confirmDialog.type) {\n        case 'delete':\n          if (confirmDialog.member) {\n            await handleRemoveMember(confirmDialog.member.id);\n          }\n          break;\n        case 'cancel':\n          if (confirmDialog.invite) {\n            await handleCancelInvite(confirmDialog.invite.id);\n          }\n          break;\n        case 'resend':\n          if (confirmDialog.invite) {\n            await handleResendInvite(confirmDialog.invite);\n          }\n          break;\n      }\n    } catch (error) {\n      console.error('Error performing action:', error);\n    } finally {\n      setConfirmDialog(null);\n    }\n  };\n\n  if (teamMembers.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n        <p className=\"text-sm text-muted-foreground\">No team members.</p>\n      </div>\n    );\n  }\n\n  const handleEditSave = (memberId: string, newName: string, newRole: string) => {\n    handleNameChange(memberId, newName);\n    handleRoleChange(memberId, newRole);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {teamMembers.map((member, idx) => (\n        <div\n          key={member.id}\n          className=\"flex items-center justify-between p-4 bg-muted/80 rounded-lg\"\n        >\n          <div className=\"flex items-center gap-4\">\n            {/* <Avatar>\n              <AvatarFallback>\n                {member.member_name?.charAt(0) || member.member_email?.charAt(0) || \"U\"}\n              </AvatarFallback>\n            </Avatar> */}\n            <div>\n\n            </div>\n            <div>\n              <p className=\"font-medium capitalize\">{member.member_name || member.member_email}</p>\n              <div className=\"flex items-center gap-2 mt-1\">\n                {idx === 0 ? (\n                  <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary capitalize\">\n                    {member.role}\n                  </Badge>\n                ) : (\n                  <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary capitalize\">\n                    {member.role}\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n          {idx !== 0 && (\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setEditingMember(member)}\n              >\n                <Pencil className=\"h-4 w-4\" />\n              </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-destructive hover:text-destructive\"\n                onClick={() => setConfirmDialog({\n                  isOpen: true,\n                  type: 'delete',\n                  member,\n                  message: `Are you sure you want to remove ${member.member_name || member.member_email} from the team?`\n                })}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n            </div>\n          )}\n        </div>\n      ))}\n      {editingMember && (\n        <EditMemberDialog\n          member={editingMember}\n          isOpen={!!editingMember}\n          onClose={() => setEditingMember(null)}\n          onSave={handleEditSave}\n        />\n      )}\n      <Dialog open={!!confirmDialog} onOpenChange={(open) => {\n        if (!open) {\n          return;\n        }\n      }}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Confirm Action</DialogTitle>\n            <DialogDescription>\n              {confirmDialog?.message}\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setConfirmDialog(null)}>\n              Cancel\n            </Button>\n            <Button\n              variant={confirmDialog?.type === 'delete' ? 'destructive' : 'default'}\n              onClick={handleConfirmAction}\n            >\n              {confirmDialog?.type === 'delete' ? 'Delete' : \n               confirmDialog?.type === 'cancel' ? 'Cancel Invite' : 'Resend Invite'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport function PendingInvitesList() {\n  const { pendingInvites, handleResendInvite, handleCancelInvite } = useTeamMembers();\n  const [confirmDialog, setConfirmDialog] = useState<{\n    isOpen: boolean;\n    type: 'cancel' | 'resend';\n    invite: PendingInvite;\n    message: string;\n  } | null>(null);\n\n  const handleConfirmAction = async () => {\n    if (!confirmDialog) return;\n\n    try {\n      if (confirmDialog.type === 'cancel') {\n        await handleCancelInvite(confirmDialog.invite.id);\n      } else {\n        await handleResendInvite(confirmDialog.invite);\n      }\n    } catch (error) {\n      console.error('Error performing action:', error);\n    } finally {\n      setConfirmDialog(null);\n    }\n  };\n\n  if (pendingInvites.length === 0) return null;\n\n  return (\n    <div className=\"mt-6\">\n      <h3 className=\"text-sm font-medium mb-4\">Pending Invites</h3>\n      <div className=\"space-y-4\">\n        {pendingInvites.map((invite) => (\n          <div\n            key={invite.id}\n            className=\"flex items-center justify-between p-4 bg-muted/90 rounded-lg\"\n          >\n            <div className=\"flex items-center gap-4\">\n              <div className=\"h-10 w-10 rounded-full bg-muted flex items-center justify-center\">\n                <Mail className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              <div>\n                <p className=\"font-medium capitalize\">{invite.member_name || invite.member_email}</p>\n                <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary capitalize\">\n                  {invite.role}\n                </Badge>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setConfirmDialog({\n                  isOpen: true,\n                  type: 'resend',\n                  invite,\n                  message: `Are you sure you want to resend the invitation to ${invite.member_email}?`\n                })}\n              >\n                Resend\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-destructive hover:text-destructive\"\n                onClick={() => setConfirmDialog({\n                  isOpen: true,\n                  type: 'cancel',\n                  invite,\n                  message: `Are you sure you want to cancel the invitation to ${invite.member_email}?`\n                })}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n      <Dialog open={!!confirmDialog} onOpenChange={(open) => {\n        if (!open) {\n          return;\n        }\n      }}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Confirm Action</DialogTitle>\n            <DialogDescription>\n              {confirmDialog?.message}\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setConfirmDialog(null)}>\n              Cancel\n            </Button>\n            <Button\n              variant={confirmDialog?.type === 'cancel' ? 'destructive' : 'default'}\n              onClick={handleConfirmAction}\n            >\n              {confirmDialog?.type === 'cancel' ? 'Cancel Invite' : 'Resend Invite'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n// Compound component subcomponents\nTeamMembers.List = TeamMembersList;\nTeamMembers.PendingInvites = PendingInvitesList; ",
      "type": "registry:component",
      "target": "components/dashboard/TeamMembers.tsx"
    },
    {
      "path": "components/dashboard/UsageStats.tsx",
      "content": "\"use client\"\nimport { createContext, useContext } from \"react\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useDashboard } from \"./Dashboard\";\nimport Link from \"next/link\";\n\ninterface UsageStatsContextType {\n  userData: {\n    storage_used: number;\n    storage_total: number;\n    tokens_used: number;\n    tokens_total: number;\n    prompts_used: number;\n    prompts_total: number;\n  };\n  simulateUsage: (type: 'storage' | 'tokens' | 'prompts', amount: number) => Promise<void>;\n}\n\nconst UsageStatsContext = createContext<UsageStatsContextType | null>(null);\n\nexport function UsageStats({ children }: { children: React.ReactNode }) {\n  const { userData, simulateUsage } = useDashboard();\n\n  return (\n    <UsageStatsContext.Provider value={{ userData: userData!, simulateUsage }}>\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n        {children}\n      </div>\n    </UsageStatsContext.Provider>\n  );\n}\n\nfunction useUsageStats() {\n  const context = useContext(UsageStatsContext);\n  if (!context) {\n    throw new Error(\"useUsageStats must be used within a UsageStats component\");\n  }\n  return context;\n}\n\nfunction formatBytes(bytes: number) {\n  const gb = bytes / 1000000000;\n  return `${gb.toFixed(1)} GB`;\n}\n\nfunction getProgressColor(used: number, total: number) {\n  if (used > total) return 'bg-red-600';\n  if (used >= total * 0.9) return 'bg-yellow-500';\n  return 'bg-blue-600';\n}\n\nexport function StorageCard() {\n  const { userData, simulateUsage } = useUsageStats();\n  const { storage_used, storage_total } = userData;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-medium\">Storage</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-gray-600 mb-2\">\n          {formatBytes(storage_used)} used of {formatBytes(storage_total)}\n        </p>\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n          <div\n            className={`h-2 rounded-full ${getProgressColor(storage_used, storage_total)}`}\n            style={{ width: `${Math.min((storage_used / storage_total) * 100, 100)}%` }}\n          />\n        </div>\n        {storage_used > storage_total && (\n          <>\n            <p className=\"text-sm text-red-600 mb-2\">\n              Storage limit exceeded by {formatBytes(storage_used - storage_total)}\n            </p>\n            <Link href=\"/\" className=\"w-full\">\n              <Button className=\"w-full\">\n                Upgrade Plan\n              </Button>\n            </Link>\n          </>\n        )}\n        {storage_used >= storage_total * 0.9 && storage_used <= storage_total && (\n          <>\n            <p className=\"text-sm text-yellow-600 mb-2\">\n              Near storage limit ({formatBytes(storage_total - storage_used)} remaining)\n            </p>\n            <Link href=\"/\" className=\"w-full\">\n              <Button className=\"w-full\" >\n                Upgrade Plan\n              </Button>\n            </Link>\n          </>\n        )}\n        <Button \n          onClick={() => simulateUsage('storage', 1000000000)}\n          className=\"w-full mt-1 \"\n          variant=\"outline\"\n          disabled={storage_used >= storage_total}\n        >\n          Simulate Usage (+1 GB)\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function TokensCard() {\n  const { userData, simulateUsage } = useUsageStats();\n  const { tokens_used, tokens_total } = userData;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-medium\">Tokens</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-gray-600 mb-2\">\n          {tokens_used} tokens used of {tokens_total} tokens\n        </p>\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n          <div\n            className={`h-2 rounded-full ${getProgressColor(tokens_used, tokens_total)}`}\n            style={{ width: `${Math.min((tokens_used / tokens_total) * 100, 100)}%` }}\n          />\n        </div>\n        {tokens_used > tokens_total && (\n          <>\n            <p className=\"text-sm text-red-600 mb-2\">\n              Token limit exceeded by {tokens_used - tokens_total} tokens\n            </p>\n            <Link href=\"/\" className=\"w-full\">\n              <Button className=\"w-full\" >\n                Upgrade Plan\n              </Button>\n            </Link>\n          </>\n        )}\n        {tokens_used >= tokens_total * 0.9 && tokens_used <= tokens_total && (\n          <>\n            <p className=\"text-sm text-yellow-600 mb-2\">\n              Near token limit ({tokens_total - tokens_used} remaining)\n            </p>\n            <Link href=\"/\" className=\"w-full\">\n              <Button className=\"w-full\">\n                Upgrade Plan\n              </Button>\n            </Link>\n          </>\n          \n        )}\n        <Button \n          onClick={() => simulateUsage('tokens', 100)}\n          className=\"w-full mt-1 \"\n          variant=\"outline\"\n          disabled={tokens_used >= tokens_total}\n        >\n          Simulate Usage (+100 tokens)\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function PromptsCard() {\n  const { userData, simulateUsage } = useUsageStats();\n  const { prompts_used, prompts_total } = userData;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-medium\">Prompts</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-gray-600 mb-2\">\n          {prompts_used} prompts used of {prompts_total} prompts\n        </p>\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n          <div\n            className={`h-2 rounded-full ${getProgressColor(prompts_used, prompts_total)}`}\n            style={{ width: `${Math.min((prompts_used / prompts_total) * 100, 100)}%` }}\n          />\n        </div>\n        {prompts_used > prompts_total && (\n          <>\n            <p className=\"text-sm text-red-600 mb-2\">\n              Prompt limit exceeded by {prompts_used - prompts_total} prompts\n            </p>\n            <Link href=\"/\" className=\"w-full\">\n              <Button className=\"w-full\">\n                Upgrade Plan\n              </Button>\n            </Link>\n          </>\n        )}\n        {prompts_used >= prompts_total * 0.9 && prompts_used <= prompts_total && (\n          <>\n            <p className=\"text-sm text-yellow-600 mb-2\">\n              Near prompt limit ({prompts_total - prompts_used} remaining)\n            </p>\n            <Link href=\"/\" className=\"w-full\">\n              <Button className=\"w-full\" >\n                Upgrade Plan\n              </Button>\n            </Link>\n          </>\n        )}\n        <Button \n          onClick={() => simulateUsage('prompts', 1)}\n          className=\"w-full mt-1 \"\n          variant=\"outline\"\n          disabled={prompts_used >= prompts_total}\n        >\n          Simulate Usage (+1 prompt)\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Compound component subcomponents\nUsageStats.Storage = StorageCard;\nUsageStats.Tokens = TokensCard;\nUsageStats.Prompts = PromptsCard; ",
      "type": "registry:component",
      "target": "components/dashboard/UsageStats.tsx"
    },
    {
      "path": "components/pricing/PricingPlans.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\";\nimport Link from \"next/link\";\nimport { Plan, plans, usePlanSelection } from \"@/hooks/usePlanSelection\";\nimport { createContext, useContext, useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface PricingContextType {\n  loading: string | null;\n  currentPlan: string | null;\n  isLoggedIn: boolean;\n  error: string | null;\n  onPlanSelect: (planName: string) => void;\n}\n\nconst PricingContext = createContext<PricingContextType | null>(null);\n\nexport function PricingPlans({ children }: { children: React.ReactNode }) {\n  const { loading, currentPlan, isLoggedIn, error, handlePlanSelect } = usePlanSelection();\n\n  return (\n    <PricingContext.Provider value={{ loading, currentPlan, isLoggedIn, error, onPlanSelect: handlePlanSelect }}>\n      <div className=\"min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          {children}\n        </div>\n      </div>\n    </PricingContext.Provider>\n  );\n}\n\nfunction usePricing() {\n  const context = useContext(PricingContext);\n  if (!context) {\n    throw new Error(\"usePricing must be used within a PricingPlans component\");\n  }\n  return context;\n}\n\nexport function PricingHeader() {\n  return (\n    <div className=\"flex justify-between \" >\n      <div></div>\n       <div className=\"text-center mb-12\">\n      <h1 className=\"text-4xl font-bold text-gray-900 sm:text-5xl\">\n        Choose Your Plan\n      </h1>\n      <p className=\"mt-4 text-xl text-gray-600\">\n        Select the perfect plan for your needs\n      </p>\n      \n    </div>\n    <div className=\"text-right \" >\n      <Link href=\"/dashboard\" className=\"border-2 border-black p-2 rounded-md\" >Go to dashboard</Link>\n    </div>\n    </div>\n   \n    \n  );\n}\n\nexport function PricingError() {\n  const { error } = usePricing();\n  if (!error) return null;\n  \n  return (\n    <div className=\"mt-4 p-3 bg-red-50 text-red-600 rounded-md\">\n      {error}\n    </div>\n  );\n}\n\nexport function PricingList() {\n  const { loading, currentPlan, onPlanSelect } = usePricing();\n  const [showDowngradeDialog, setShowDowngradeDialog] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);\n\n  const handlePlanClick = (planName: string) => {\n    // Check if this is a downgrade\n    const currentPlanIndex = plans.findIndex(p => p.name === currentPlan);\n    const newPlanIndex = plans.findIndex(p => p.name === planName);\n    \n    if (currentPlan && newPlanIndex < currentPlanIndex) {\n      // It's a downgrade, show confirmation dialog\n      setSelectedPlan(planName);\n      setShowDowngradeDialog(true);\n    } else {\n      // It's an upgrade or same plan, proceed directly\n      onPlanSelect(planName);\n    }\n  };\n\n  const handleConfirmDowngrade = () => {\n    if (selectedPlan) {\n      onPlanSelect(selectedPlan);\n      setShowDowngradeDialog(false);\n      setSelectedPlan(null);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3\">\n        {plans.map((plan) => (\n          <Card \n            key={plan.name} \n            className={`flex flex-col relative ${currentPlan === plan.name ? 'border-blue-500 border-2' : ''} ${plan.name === 'Pro' ? 'border-primary' : ''}`}\n          >\n            {plan.name === 'Pro' && (\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <div className=\"bg-primary text-white text-xs font-semibold px-3 py-1 rounded-full\">\n                  Recommended\n                </div>\n              </div>\n            )}\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-bold\">\n                {plan.name}\n                {currentPlan === plan.name && (\n                  <span className=\"ml-2 text-sm text-blue-600\">(Current Plan)</span>\n                )}\n              </CardTitle>\n              <CardDescription>\n                <span className=\"text-3xl font-bold\">{plan.price}</span>\n                {plan.period && (\n                  <span className=\"text-gray-500\">{plan.period}</span>\n                )}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"flex-grow\">\n              <ul className=\"space-y-4\">\n                {plan.features.map((feature) => (\n                  <li key={feature} className=\"flex items-center\">\n                    <svg\n                      className=\"h-5 w-5 text-green-500 mr-2\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M5 13l4 4L19 7\"\n                      />\n                    </svg>\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n            <CardFooter>\n              <Button\n                variant={plan.buttonVariant}\n                className=\"w-full\"\n                onClick={() => handlePlanClick(plan.name)}\n                disabled={loading === plan.name || currentPlan === plan.name}\n              >\n                {loading === plan.name ? \"Processing...\" : (\n                  currentPlan === plan.name ? \"Current Plan\" : plan.buttonText\n                )}\n              </Button>\n            </CardFooter>\n          </Card>\n        ))}\n      </div>\n\n      <Dialog open={showDowngradeDialog} onOpenChange={(open) => {\n        // Only allow closing through buttons\n        if (!open) {\n          return;\n        }\n      }}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Confirm Plan Downgrade</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to downgrade your plan? This may result in reduced features and storage capacity.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowDowngradeDialog(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={handleConfirmDowngrade}>\n              Confirm Downgrade\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport function PricingAccountSection() {\n  const { isLoggedIn } = usePricing();\n\n  return (\n    <div className=\"mt-12 text-center\">\n      <p className=\"text-gray-600\">\n        {isLoggedIn ? (\n          <>\n            Want to add another account?{\" \"}\n            <Link href=\"/auth/login?add_account=true\" className=\"text-blue-600 hover:underline\">\n              Add Account\n            </Link>\n          </>\n        ) : (\n          <>\n            Already have an account?{\" \"}\n            <Link href=\"/auth/login\" className=\"text-blue-600 hover:underline\">\n              Sign in\n            </Link>\n          </>\n        )}\n      </p>\n    </div>\n  );\n}\n\n// Compound component subcomponents\nPricingPlans.Header = PricingHeader;\nPricingPlans.Error = PricingError;\nPricingPlans.List = PricingList;\nPricingPlans.AccountSection = PricingAccountSection; ",
      "type": "registry:component",
      "target": "components/pricing/PricingPlans.tsx"
    },
    {
      "path": "config/plans.ts",
      "content": "export interface PlanFeature {\n  name: string;\n  value: string;\n}\n\nexport interface Plan {\n  name: string;\n  price: string;\n  period?: string;\n  features: PlanFeature[];\n  buttonText: string;\n  buttonVariant: 'default' | 'outline';\n}\n\nexport const plans: Plan[] = [\n  {\n    name: \"Basic\",\n    price: \"Free\",\n    features: [\n      { name: \"Storage\", value: \"5 GB\" },\n      { name: \"Tokens\", value: \"1000\" },\n      { name: \"Prompts\", value: \"3\" },\n      { name: \"Users\", value: \"5\" }\n    ],\n    buttonText: \"Free Plan\",\n    buttonVariant: \"outline\"\n  },\n  {\n    name: \"Pro\",\n    price: \"$9.99\",\n    period: \"/month\",\n    features: [\n      { name: \"Storage\", value: \"10 GB\" },\n      { name: \"Tokens\", value: \"2000\" },\n      { name: \"Prompts\", value: \"6\" },\n      { name: \"Users\", value: \"10\" }\n    ],\n    buttonText: \"Get Pro\",\n    buttonVariant: \"default\"\n  },\n  {\n    name: \"Enterprise\",\n    price: \"$19.99\",\n    period: \"/month\",\n    features: [\n      { name: \"Storage\", value: \"15 GB\" },\n      { name: \"Tokens\", value: \"3000\" },\n      { name: \"Prompts\", value: \"9\" },\n      { name: \"Users\", value: \"15\" }\n    ],\n    buttonText: \"Get Enterprise\",\n    buttonVariant: \"outline\"\n  }\n]; ",
      "type": "registry:block",
      "target": "config/plans.ts"
    },
    {
      "path": "hooks/useBase.ts",
      "content": "import { useState, useEffect } from 'react';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\n\nexport interface BaseHookProps {\n  tableName: string;\n  initialData?: any;\n}\n\nexport function useBase({ tableName, initialData }: BaseHookProps) {\n  const [data, setData] = useState<any>(initialData || null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const supabase = createClientComponentClient();\n\n  const fetchData = async (query?: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      let { data: result, error } = await supabase\n        .from(tableName)\n        .select('*')\n        .match(query || {});\n\n      if (error) throw error;\n      \n      setData(result);\n      return result;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createData = async (newData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data: result, error } = await supabase\n        .from(tableName)\n        .insert(newData)\n        .select();\n\n      if (error) throw error;\n      \n      setData(result);\n      return result;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateData = async (id: string, updates: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data: result, error } = await supabase\n        .from(tableName)\n        .update(updates)\n        .eq('id', id)\n        .select();\n\n      if (error) throw error;\n      \n      setData(result);\n      return result;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteData = async (id: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { error } = await supabase\n        .from(tableName)\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      \n      setData(null);\n      return true;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    data,\n    loading,\n    error,\n    fetchData,\n    createData,\n    updateData,\n    deleteData,\n  };\n} ",
      "type": "registry:hook",
      "target": "hooks/useBase.ts"
    },
    {
      "path": "hooks/useDashboardPage.ts",
      "content": "import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { toast } from \"sonner\";\nimport { useBase } from './useBase';\n\ninterface UserData {\n  id: string;\n  storage_used: number;\n  storage_total: number;\n  tokens_used: number;\n  tokens_total: number;\n  prompts_used: number;\n  prompts_total: number;\n  plan: string;\n}\n\ninterface TeamMember {\n  id: string;\n  team_owner_id: string;\n  member_name: string;\n  member_email: string;\n  role: string;\n  status: 'active' | 'pending' | 'inactive';\n  created_at: string;\n}\n\ninterface PendingInvite {\n  id: string;\n  team_owner_id: string;\n  member_email: string;\n  member_name: string;\n  role: string;\n  status: 'pending' | 'accepted' | 'declined';\n  token: string;\n  expires_at: string;\n  created_at: string;\n}\n\nexport function useDashboardPage() {\n  const [email, setEmail] = useState<string | null>(null);\n  const [userData, setUserData] = useState<UserData | null>(null);\n  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);\n  const [pendingInvites, setPendingInvites] = useState<PendingInvite[]>([]);\n  const [accounts, setAccounts] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n  const supabase = createClientComponentClient();\n  const userDataHook = useBase({ tableName: 'users_data' });\n  const teamMembersHook = useBase({ tableName: 'team_members' });\n  const invitesHook = useBase({ tableName: 'team_invitations' });\n\n  const fetchLatestUserData = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return null;\n\n      const result = await userDataHook.fetchData({ id: user.id });\n      if (result && Array.isArray(result) && result.length > 0) {\n        return result[0] as UserData;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      return null;\n    }\n  };\n\n  const simulateUsage = async (type: 'storage' | 'tokens' | 'prompts', amount: number) => {\n    if (!userData) return;\n\n    const latestData = await fetchLatestUserData();\n    if (!latestData) {\n      toast.error(\"Failed to fetch latest data. Please try again.\");\n      return;\n    }\n\n    const updates: Partial<UserData> = {};\n    let canUpdate = false;\n\n    switch (type) {\n      case 'storage':\n        if (latestData.storage_used + amount <= latestData.storage_total) {\n          updates.storage_used = latestData.storage_used + amount;\n          canUpdate = true;\n        } else {\n          toast.error(`Maximum storage limit reached!`);\n        }\n        break;\n      case 'tokens':\n        if (latestData.tokens_used + amount <= latestData.tokens_total) {\n          updates.tokens_used = latestData.tokens_used + amount;\n          canUpdate = true;\n        } else {\n          toast.error(`Maximum tokens limit reached!`);\n        }\n        break;\n      case 'prompts':\n        if (latestData.prompts_used + amount <= latestData.prompts_total) {\n          updates.prompts_used = latestData.prompts_used + amount;\n          canUpdate = true;\n        } else {\n          toast.error(`Maximum prompts limit reached!`);\n        }\n        break;\n    }\n\n    if (canUpdate) {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      setUserData(prev => prev ? { ...prev, ...updates } : null);\n      const result = await userDataHook.updateData(user.id, updates);\n\n      if (!result) {\n        const latestData = await fetchLatestUserData();\n        if (latestData) setUserData(latestData);\n        toast.error('Failed to update usage. Please try again.');\n      } else {\n        toast.success('Usage updated successfully!');\n      }\n    }\n  };\n\n  const handleRemoveMember = async (memberId: string) => {\n    try {\n      const { error } = await supabase\n        .from('team_members')\n        .delete()\n        .eq('id', memberId);\n\n      if (error) {\n        throw error;\n      }\n\n      setTeamMembers(prev => prev.filter(m => m.id !== memberId));\n      toast.success('Team member removed successfully');\n    } catch (error) {\n      console.error('Error removing member:', error);\n      toast.error('Failed to remove team member');\n    }\n  };\n\n  const handleResendInvite = async (invite: PendingInvite) => {\n    try {\n      const newToken = crypto.randomUUID();\n      const updates = {\n        token: newToken,\n        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      const result = await invitesHook.updateData(invite.id, updates);\n      if (result) {\n        await fetch('/api/send-invitation', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            to: invite.member_email,\n            name: invite.member_name,\n            role: invite.role,\n            token: newToken,\n            teamOwnerId: invite.team_owner_id,\n          }),\n        });\n\n        setPendingInvites(prev => prev.map(i => i.id === invite.id ? { ...i, ...updates } : i));\n        toast.success('Invitation resent successfully');\n      } else {\n        toast.error('Failed to resend invitation');\n      }\n    } catch (error) {\n      console.error('Error resending invitation:', error);\n      toast.error('Failed to resend invitation');\n    }\n  };\n\n  const handleCancelInvite = async (inviteId: string) => {\n    try {\n      const { error } = await supabase\n        .from('team_invitations')\n        .delete()\n        .eq('id', inviteId);\n\n      if (error) {\n        throw error;\n      }\n\n      setPendingInvites(prev => prev.filter(i => i.id !== inviteId));\n      toast.success('Invitation cancelled successfully');\n    } catch (error) {\n      console.error('Error canceling invite:', error);\n      toast.error('Failed to cancel invitation');\n    }\n  };\n\n  const handleRoleChange = async (memberId: string, newRole: string) => {\n    try {\n      const result = await teamMembersHook.updateData(memberId, { role: newRole });\n      if (result) {\n        setTeamMembers(prev => prev.map(m => m.id === memberId ? { ...m, role: newRole } : m));\n        toast.success('Role updated successfully');\n      } else {\n        toast.error('Failed to update role');\n      }\n    } catch (error) {\n      console.error('Error updating member role:', error);\n      toast.error('Failed to update role');\n    }\n  };\n\n  const handleNameChange = async (memberId: string, newName: string) => {\n    try {\n      const result = await teamMembersHook.updateData(memberId, { member_name: newName });\n      if (result) {\n        setTeamMembers(prev => prev.map(m => m.id === memberId ? { ...m, member_name: newName } : m));\n        toast.success('Name updated successfully');\n      } else {\n        toast.error('Failed to update name');\n      }\n    } catch (error) {\n      console.error('Error updating member name:', error);\n      toast.error('Failed to update name');\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Check for stored session\n        const storedSession = localStorage.getItem('current_session');\n        if (storedSession) {\n          const { data: { session }, error } = await supabase.auth.setSession(JSON.parse(storedSession));\n          if (error) {\n            console.error('Error setting session:', error);\n            localStorage.removeItem('current_session');\n            router.push('/auth/login');\n            return;\n          }\n        }\n\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) {\n          router.push('/auth/login');\n          return;\n        }\n\n        // Store the session in localStorage\n        const { data: { session } } = await supabase.auth.getSession();\n        if (session) {\n          localStorage.setItem('current_session', JSON.stringify(session));\n        }\n\n        setEmail(user.email || null);\n\n        // Fetch all accounts for the current user\n        const { data: accountsData, error: accountsError } = await supabase\n          .from('user_accounts')\n          .select('*')\n          .or(`user_id.eq.${user.id},email.eq.${user.email}`);\n\n        if (!accountsError && accountsData) {\n          const uniqueAccounts = accountsData\n            .filter((account, index, self) =>\n              index === self.findIndex((a) => a.email === account.email))\n            .filter(account => account.email !== user.email);\n          setAccounts(uniqueAccounts);\n        }\n\n        // Fetch initial user data\n        const initialData = await fetchLatestUserData();\n        if (initialData) setUserData(initialData);\n\n        // Fetch team members\n        const { data: teamData, error: teamError } = await supabase\n          .from('team_members')\n          .select('*')\n          .eq('team_owner_id', user.id);\n\n        if (!teamError) setTeamMembers(teamData || []);\n\n        // Fetch pending invites\n        const { data: invitesData, error: invitesError } = await supabase\n          .from('team_invitations')\n          .select('*')\n          .eq('team_owner_id', user.id)\n          .eq('status', 'pending');\n\n        if (!invitesError) setPendingInvites(invitesData || []);\n\n        // Real-time subscriptions\n        const channel = supabase\n          .channel('user_data_changes')\n          .on('postgres_changes', { event: '*', schema: 'public', table: 'users_data' }, async (payload) => {\n            if (payload.new) {\n              const latestData = await fetchLatestUserData();\n              if (latestData) setUserData(latestData);\n            }\n          })\n          .subscribe();\n\n        const teamChannel = supabase\n          .channel('team_members_changes')\n          .on('postgres_changes', { event: '*', schema: 'public', table: 'team_members', filter: `team_owner_id=eq.${user.id}` }, (payload) => {\n            if (payload.eventType === 'INSERT') {\n              setTeamMembers(prev => [...prev, payload.new as TeamMember]);\n            } else if (payload.eventType === 'DELETE') {\n              setTeamMembers(prev => prev.filter(member => member.id !== payload.old.id));\n            }\n          })\n          .subscribe();\n\n        return () => {\n          supabase.removeChannel(channel);\n          supabase.removeChannel(teamChannel);\n        };\n      } catch (error) {\n        console.error('Error in fetchData:', error);\n        setError('Failed to load dashboard data');\n      }\n    };\n\n    fetchData();\n  }, [supabase, router]);\n\n  // Add session to all requests\n  useEffect(() => {\n    const storedSession = localStorage.getItem('current_session');\n    if (storedSession) {\n      // Add session to all fetch requests\n      const originalFetch = window.fetch;\n      window.fetch = async (input, init) => {\n        const headers = new Headers(init?.headers);\n        headers.set('x-stored-session', storedSession);\n        return originalFetch(input, { ...init, headers });\n      };\n    }\n  }, []);\n\n  return {\n    userData,\n    teamMembers,\n    pendingInvites,\n    accounts,\n    loading,\n    error,\n    simulateUsage,\n    handleRemoveMember,\n    handleResendInvite,\n    handleCancelInvite,\n    handleRoleChange,\n    handleNameChange,\n  };\n} ",
      "type": "registry:hook",
      "target": "hooks/useDashboardPage.ts"
    },
    {
      "path": "hooks/useInviteMember.ts",
      "content": "import { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\r\nimport { toast } from \"sonner\";\r\n\r\ninterface InviteFormData {\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\nexport function useInviteMember() {\r\n  const router = useRouter();\r\n  const supabase = createClientComponentClient();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n\r\n  const handleSubmit = async (formData: InviteFormData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n\r\n    try {\r\n      // Get current user\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        router.push('/auth/login');\r\n        return;\r\n      }\r\n\r\n      // Check if email already exists in team members\r\n      const { data: existingMember, error: memberError } = await supabase\r\n        .from('team_members')\r\n        .select('id')\r\n        .eq('team_owner_id', user.id)\r\n        .eq('member_email', formData.email)\r\n        .single();\r\n\r\n      if (memberError && memberError.code !== 'PGRST116') { // PGRST116 means no rows found\r\n        throw memberError;\r\n      }\r\n\r\n      if (existingMember) {\r\n        toast.error('This email is already a team member');\r\n        return;\r\n      }\r\n\r\n      // Check if email already has a pending invitation\r\n      const { data: existingInvite, error: inviteError } = await supabase\r\n        .from('team_invitations')\r\n        .select('id')\r\n        .eq('team_owner_id', user.id)\r\n        .eq('member_email', formData.email)\r\n        .eq('status', 'pending')\r\n        .single();\r\n\r\n      if (inviteError && inviteError.code !== 'PGRST116') {\r\n        throw inviteError;\r\n      }\r\n\r\n      if (existingInvite) {\r\n        toast.error('A pending invitation already exists for this email');\r\n        return;\r\n      }\r\n\r\n      // Get user's plan and team members count\r\n      const { data: userData, error: userError } = await supabase\r\n        .from('users_data')\r\n        .select('plan')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      if (userError) throw userError;\r\n\r\n      // Get current team members count\r\n      const { count, error: countError } = await supabase\r\n        .from('team_members')\r\n        .select('*', { count: 'exact' })\r\n        .eq('team_owner_id', user.id);\r\n\r\n      if (countError) throw countError;\r\n\r\n      // Check team member limit based on plan\r\n      const memberLimit = userData.plan === 'Basic' ? 5 : userData.plan === 'Pro' ? 10 : 15;\r\n      if (count && count >= memberLimit) {\r\n        toast.error(`You've reached the maximum team members limit for your ${userData.plan} plan`);\r\n        return;\r\n      }\r\n\r\n      // Generate a unique token for the invitation\r\n      const invitationToken = crypto.randomUUID();\r\n\r\n      // Create invitation record\r\n      const { error: createInviteError } = await supabase\r\n        .from('team_invitations')\r\n        .insert({\r\n          team_owner_id: user.id,\r\n          member_name: formData.name,\r\n          member_email: formData.email,\r\n          role: formData.role,\r\n          token: invitationToken,\r\n          status: 'pending',\r\n          expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days expiry\r\n        });\r\n\r\n      if (createInviteError) throw createInviteError;\r\n\r\n      // Send invitation email using local API route\r\n      const response = await fetch('/api/send-invitation', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          to: formData.email,\r\n          name: formData.name,\r\n          role: formData.role,\r\n          token: invitationToken,\r\n          teamOwnerId: user.id,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to send invitation email');\r\n      }\r\n\r\n      toast.success('Invitation sent successfully!');\r\n      setSuccess('Invitation sent successfully!');\r\n    } catch (error: any) {\r\n      console.error('Error sending invitation:', error);\r\n      toast.error(error.message || 'Failed to send invitation');\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    success,\r\n    handleSubmit,\r\n  };\r\n} ",
      "type": "registry:hook",
      "target": "hooks/useInviteMember.ts"
    },
    {
      "path": "hooks/usePlanSelection.ts",
      "content": "import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { useBase } from './useBase';\n\nexport interface Plan {\n  name: string;\n  price: string;\n  period?: string;\n  features: string[];\n  buttonText: string;\n  buttonVariant: \"outline\" | \"default\";\n}\n\nexport const plans: Plan[] = [\n  {\n    name: \"Basic\",\n    price: \"Free\",\n    features: [\n      \"5 GB Storage\",\n      \"1000 Tokens\",\n      \"3 Prompts\",\n      \"5 Users\",\n    ],\n    buttonText: \"Free Plan\",\n    buttonVariant: \"outline\",\n  },\n  {\n    name: \"Pro\",\n    price: \"$9.99 \",\n    period: \"/month\",\n    features: [\n      \"10 GB Storage\",\n      \"2000 Tokens\",\n      \"6 Prompts\",\n      \"10 Users\",\n    ],\n    buttonText: \"Get Pro\",\n    buttonVariant: \"default\",\n  },\n  {\n    name: \"Enterprise\",\n    price: \"$19.99\",\n    period: \"/month\",\n    features: [\n      \"15 GB Storage\",\n      \"3000 Tokens\",\n      \"9 Prompts\",\n      \"15 Users\",\n    ],\n    buttonText: \"Get Enterprise\",\n    buttonVariant: \"outline\",\n  },\n];\n\nexport function usePlanSelection() {\n  const router = useRouter();\n  const supabase = createClientComponentClient();\n  const userDataHook = useBase({ tableName: 'users_data' });\n  const [loading, setLoading] = useState<string | null>(null);\n  const [currentPlan, setCurrentPlan] = useState<string | null>(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        setIsLoggedIn(!!user);\n        \n        if (user) {\n          const result = await userDataHook.fetchData({ id: user.id });\n          if (result && Array.isArray(result) && result.length > 0) {\n            setCurrentPlan(result[0].plan);\n          }\n        }\n      } catch (err) {\n        console.error('Error checking auth:', err);\n      }\n    };\n\n    checkAuth();\n  }, [supabase, userDataHook]);\n\n  const handlePlanSelect = async (planName: string) => {\n    try {\n      setError(null);\n      setLoading(planName);\n\n      // Validate plan name\n      if (!plans.some(p => p.name === planName)) {\n        throw new Error('Invalid plan selected');\n      }\n\n      const { data: { user } } = await supabase.auth.getUser();\n\n      if (!user) {\n        // If not logged in, store selected plan in localStorage and redirect to signup\n        localStorage.setItem('selectedPlan', planName);\n        router.push('/auth/signup');\n        return;\n      }\n\n      // Don't allow selecting the same plan\n      if (currentPlan === planName) {\n        setError('You are already on this plan');\n        return;\n      }\n\n      // Update the user's plan in the database\n      const result = await userDataHook.updateData(user.id, { plan: planName });\n\n      if (!result) {\n        throw new Error('Failed to update plan');\n      }\n\n      // Update local state\n      setCurrentPlan(planName);\n      \n      // Redirect to dashboard\n      router.push('/dashboard');\n    } catch (error) {\n      console.error('Error updating plan:', error);\n      setError(error instanceof Error ? error.message : 'Failed to update plan. Please try again.');\n    } finally {\n      setLoading(null);\n    }\n  };\n\n  return {\n    loading,\n    currentPlan,\n    isLoggedIn,\n    error,\n    handlePlanSelect,\n  };\n} ",
      "type": "registry:hook",
      "target": "hooks/usePlanSelection.ts"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:block",
      "target": "lib/utils.ts"
    },
    {
      "path": "types/account.ts",
      "content": "export interface Account {\n  id: string;\n  email: string;\n  name?: string;\n  avatar?: string;\n} ",
      "type": "registry:block",
      "target": "types/account.ts"
    },
    {
      "path": "types/dashboard.ts",
      "content": "export interface UserData {\n  plan: string;\n  storage_used: number;\n  storage_total: number;\n  tokens_used: number;\n  tokens_total: number;\n  prompts_used: number;\n  prompts_total: number;\n}\n\nexport interface TeamMember {\n  id: string;\n  member_email: string;\n  member_name?: string;\n  role: string;\n  status: 'active' | 'pending';\n  created_at: string;\n}\n\nexport interface PendingInvite {\n  id: string;\n  member_email: string;\n  member_name?: string;\n  role: string;\n  created_at: string;\n  expires_at: string;\n}\n\nexport interface Account {\n  id: string;\n  email: string;\n  name?: string;\n  role?: string;\n} ",
      "type": "registry:block",
      "target": "types/dashboard.ts"
    },
    {
      "path": "middleware.ts",
      "content": "import { createMiddlewareClient } from \"@supabase/auth-helpers-nextjs\";\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport async function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n  const supabase = createMiddlewareClient({ req: request, res: response });\n\n  // Refresh session if expired - required for Server Components\n  await supabase.auth.getSession();\n\n  const { data: { user } } = await supabase.auth.getUser();\n\n  // Allow access to public routes without authentication\n  if (\n    request.nextUrl.pathname === \"/\" ||\n    request.nextUrl.pathname === \"/invitation/thank-you\" ||\n    request.nextUrl.pathname.startsWith(\"/auth/\")\n  ) {\n    return response;\n  }\n\n  // Auth routes protection\n  if (user && [\"/auth/\", \"/auth/signup\"].includes(request.nextUrl.pathname)) {\n    return NextResponse.redirect(new URL(\"/dashboard\", request.url));\n  }\n\n  // Protected routes\n  if (!user && request.nextUrl.pathname.startsWith(\"/dashboard\")) {\n    return NextResponse.redirect(new URL(\"/auth/login\", request.url));\n  }\n\n  return response;\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n}; ",
      "type": "registry:block",
      "target": "middleware.ts"
    }
  ]
}